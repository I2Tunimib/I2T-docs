"use strict";(self.webpackChunktest=self.webpackChunktest||[]).push([[182],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var i=a.createContext({}),c=function(e){var t=a.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(i.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,i=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=c(n),m=o,f=u["".concat(i,".").concat(m)]||u[m]||d[m]||r;return n?a.createElement(f,l(l({ref:t},p),{},{components:n})):a.createElement(f,l({ref:t},p))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,l=new Array(r);l[0]=u;var s={};for(var i in t)hasOwnProperty.call(t,i)&&(s[i]=t[i]);s.originalType=e,s.mdxType="string"==typeof e?e:o,l[1]=s;for(var c=2;c<r;c++)l[c]=n[c];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},8215:(e,t,n)=>{n.d(t,{Z:()=>o});var a=n(7294);const o=function({children:e,hidden:t,className:n}){return a.createElement("div",{role:"tabpanel",hidden:t,className:n},e)}},6396:(e,t,n)=>{n.d(t,{Z:()=>u});var a=n(7462),o=n(7294),r=n(2389),l=n(9443);const s=function(){const e=(0,o.useContext)(l.Z);if(null==e)throw new Error('"useUserPreferencesContext" is used outside of "Layout" component.');return e};var i=n(3810),c=n(6010);const p="tabItem_vU9c";function d(e){const{lazy:t,block:n,defaultValue:a,values:r,groupId:l,className:d}=e,u=o.Children.map(e.children,(e=>{if((0,o.isValidElement)(e)&&void 0!==e.props.value)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),m=r??u.map((({props:{value:e,label:t}})=>({value:e,label:t}))),f=(0,i.lx)(m,((e,t)=>e.value===t.value));if(f.length>0)throw new Error(`Docusaurus error: Duplicate values "${f.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const b=null===a?a:a??u.find((e=>e.props.default))?.props.value??u[0]?.props.value;if(null!==b&&!m.some((e=>e.value===b)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${b}" but none of its children has the corresponding value. Available values are: ${m.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:h,setTabGroupChoices:v}=s(),[g,k]=(0,o.useState)(b),y=[],{blockElementScrollPositionUntilNextRender:w}=(0,i.o5)();if(null!=l){const e=h[l];null!=e&&e!==g&&m.some((t=>t.value===e))&&k(e)}const C=e=>{const t=e.currentTarget,n=y.indexOf(t),a=m[n].value;a!==g&&(w(t),k(a),null!=l&&v(l,a))},T=e=>{let t=null;switch(e.key){case"ArrowRight":{const n=y.indexOf(e.currentTarget)+1;t=y[n]||y[0];break}case"ArrowLeft":{const n=y.indexOf(e.currentTarget)-1;t=y[n]||y[y.length-1];break}}t?.focus()};return o.createElement("div",{className:"tabs-container"},o.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,c.Z)("tabs",{"tabs--block":n},d)},m.map((({value:e,label:t})=>o.createElement("li",{role:"tab",tabIndex:g===e?0:-1,"aria-selected":g===e,className:(0,c.Z)("tabs__item",p,{"tabs__item--active":g===e}),key:e,ref:e=>y.push(e),onKeyDown:T,onFocus:C,onClick:C},t??e)))),t?(0,o.cloneElement)(u.filter((e=>e.props.value===g))[0],{className:"margin-vert--md"}):o.createElement("div",{className:"margin-vert--md"},u.map(((e,t)=>(0,o.cloneElement)(e,{key:t,hidden:e.props.value!==g})))))}function u(e){const t=(0,r.Z)();return o.createElement(d,(0,a.Z)({key:String(t)},e))}},6788:(e,t,n)=>{n.r(t),n.d(t,{frontMatter:()=>s,contentTitle:()=>i,metadata:()=>c,toc:()=>p,default:()=>u});var a=n(7462),o=(n(7294),n(3905)),r=n(6396),l=n(8215);const s={sidebar_position:5},i="Dashboard components",c={unversionedId:"frontend/dashboard-components",id:"frontend/dashboard-components",title:"Dashboard components",description:"The dashboard visualizes in a table structure informations for datasets and tables. Each information can be customized to be displayed with a particular component mapped to type data field as explained in the backend section:",source:"@site/docs/frontend/dashboard-components.md",sourceDirName:"frontend",slug:"/frontend/dashboard-components",permalink:"/I2T-docs/frontend/dashboard-components",editUrl:"https://github.com/I2Tunimib/I2T-docs/docs/frontend/dashboard-components.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"Components tree",permalink:"/I2T-docs/frontend/components"},next:{title:"Metadata components",permalink:"/I2T-docs/frontend/metadata-components"}},p=[{value:"Example - Adding a new component",id:"example---adding-a-new-component",children:[],level:2}],d={toc:p};function u({components:e,...t}){return(0,o.kt)("wrapper",(0,a.Z)({},d,t,{components:e,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"dashboard-components"},"Dashboard components"),(0,o.kt)("p",null,"The dashboard visualizes in a table structure informations for datasets and tables. Each information can be customized to be displayed with a particular component mapped to ",(0,o.kt)("strong",{parentName:"p"},"type")," data field as explained in the backend section:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="pages/Dashboard/cellComponentConfig.tsx"',title:'"pages/Dashboard/cellComponentConfig.tsx"'},"export const CELL_COMPONENTS_TYPES: Record<CellComponent, CellComponentProps> = {\n  link: {\n    component: (row, { value, props }) => {\n      ...\n      return <MatLink sx={{ textDecoration: 'none' }} component={Link} to={url}>{value}</MatLink>;\n    }\n  },\n  ...\n};\n")),(0,o.kt)("p",null,"The example above renders an information of dataset/table specified as ",(0,o.kt)("inlineCode",{parentName:"p"},"type: 'link'")," as a clickable url. A custom sort function ",(0,o.kt)("inlineCode",{parentName:"p"},"sortFn")," can also be specified if the value to order isn't a primitive type."),(0,o.kt)("h2",{id:"example---adding-a-new-component"},"Example - Adding a new component"),(0,o.kt)("p",null,"We are going to add a percentage component that shows a progress bar showing the percentage of annotated cells for a table."),(0,o.kt)(r.Z,{mdxType:"Tabs"},(0,o.kt)(l.Z,{value:"backend",label:"Backend",mdxType:"TabItem"},(0,o.kt)("p",null,"Add data field ",(0,o.kt)("strong",{parentName:"p"},"completion")," to ",(0,o.kt)("inlineCode",{parentName:"p"},"COLLECTION_TABLES_MAP")," of type ",(0,o.kt)("strong",{parentName:"p"},"percentage"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="api/services/datasets.service.js"',title:'"api/services/datasets.service.js"'},"const COLLECTION_TABLES_MAP = {\n  nCols: {\n    label: 'N. Cols'\n  },\n  nRows: {\n    label: 'N. Rows'\n  },\n  // we are going to add a percentage component\n  completion: {\n    label: 'Completion',\n    type: 'percentage'\n  }\n}\n")),(0,o.kt)("p",null,"Modify the API to return the ",(0,o.kt)("inlineCode",{parentName:"p"},"completion")," data field for each table."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="api/services/datasets.service.js"',title:'"api/services/datasets.service.js"'},"const DatasetsService = {\n  ...,\n  findAllTablesByDataset: async (idDataset) => {\n    const tables = await ParseService.readJsonFile({\n      path: getTablesDbPath(),\n      pattern: 'tables.*',\n      acc: [],\n      transformFn: (item) => {\n        // add completion data field\n        const { nCells, nCellsReconciliated, ...rest } = item;\n        return {\n          ...rest,\n          completion: {\n            total: nCells,\n            value: nCellsReconciliated\n          }\n        }\n      },\n      condition: (item) => item.idDataset === idDataset\n    });\n    return {\n      // return configuration of data fields\n      meta: COLLECTION_TABLES_MAP,\n      // return table entities with completion data field\n      collection: tables\n    }\n  },\n  ...\n}\n"))),(0,o.kt)(l.Z,{value:"frontend",label:"Frontend",mdxType:"TabItem"},(0,o.kt)("p",null,"Let's build a component that renders the progress bar given the ",(0,o.kt)("inlineCode",{parentName:"p"},"completion")," data field. "),(0,o.kt)("p",null,"Each component receives as input:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"row: row of the dashboard containing each data field for the current object (table/dataset)"),(0,o.kt)("li",{parentName:"ul"},"props: contains a value, which is the exact value of a data field, and additional props configured in the backend collection object (see the link data field for an example).")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},'const Percentage = (row, props) => {\n  const { total, value } = props.value;\n  return (\n    <Tooltip\n      arrow\n      title={(\n        <Stack>\n          {Object.keys(props).map((key, index) => (\n            <span key={index}>\n              {`${key}: ${props[key as keyof typeof props]}`}\n            </span>\n          ))}\n        </Stack>\n      )}\n      placement="left">\n      <Stack direction="row" gap="18px">\n        <Battery value={(value / total) * 100} />\n      </Stack>\n    </Tooltip>\n  );\n}\n')),(0,o.kt)("p",null,"Add the ",(0,o.kt)("inlineCode",{parentName:"p"},"percentage")," component type to the list of available component:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="pages/Dashboard/cellComponentsConfig.tsx"',title:'"pages/Dashboard/cellComponentsConfig.tsx"'},"export const CELL_COMPONENTS_TYPES: Record<CellComponent, CellComponentProps> = {\n  ...,\n  link: {\n    component: (row, { value, props }) => {\n      ...\n    }\n  },\n  percentage: {\n    component: Percentage,\n    // an additional sorting function can be specified to order the completion object\n    sortFn: (\n      rowA: any, rowB: any,\n      columnId: string,\n      desc: boolean\n    ) => {\n      const { totalA, valueA } = rowA.values[columnId];\n      const { totalB, valueB } = rowB.values[columnId];\n      return (valueA / totalA) < (totalB / valueB) ? -1 : 1;\n    }\n  },\n  ...\n};\n")))),(0,o.kt)("p",null,"The result obtained will be the following:"),(0,o.kt)("div",{style:{textAlign:"center"}},(0,o.kt)("img",{src:"/I2T-docs/img/dashboard-component-res.png"})))}u.isMDXComponent=!0}}]);