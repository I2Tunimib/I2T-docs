"use strict";(self.webpackChunktest=self.webpackChunktest||[]).push([[593],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>m});var a=t(7294);function l(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){l(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,a,l=function(e,n){if(null==e)return{};var t,a,l={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(l[t]=e[t]);return l}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(l[t]=e[t])}return l}var s=a.createContext({}),d=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},p=function(e){var n=d(e.components);return a.createElement(s.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},u=a.forwardRef((function(e,n){var t=e.components,l=e.mdxType,i=e.originalType,s=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),u=d(t),m=l,b=u["".concat(s,".").concat(m)]||u[m]||c[m]||i;return t?a.createElement(b,r(r({ref:n},p),{},{components:t})):a.createElement(b,r({ref:n},p))}));function m(e,n){var t=arguments,l=n&&n.mdxType;if("string"==typeof e||l){var i=t.length,r=new Array(i);r[0]=u;var o={};for(var s in n)hasOwnProperty.call(n,s)&&(o[s]=n[s]);o.originalType=e,o.mdxType="string"==typeof e?e:l,r[1]=o;for(var d=2;d<i;d++)r[d]=t[d];return a.createElement.apply(null,r)}return a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},3565:(e,n,t)=>{t.r(n),t.d(n,{frontMatter:()=>i,contentTitle:()=>r,metadata:()=>o,toc:()=>s,default:()=>p});var a=t(7462),l=(t(7294),t(3905));const i={id:"save-table-get-table-api",slug:"/api/save-get-table",sidebar_position:1,title:"Save Table & Get Table API Data Format"},r="Save Table & Get Table API Data Format",o={unversionedId:"backend/Api Specifications/save-table-get-table-api",id:"backend/Api Specifications/save-table-get-table-api",title:"Save Table & Get Table API Data Format",description:"This document describes how data is passed when calling the Save Table and Get Table endpoints in the I2T-backend API. Example payloads are provided based on the files in samplejsons/gettablesample.json and samplejsons/updateTable_sample.json.",source:"@site/docs/backend/Api Specifications/save-get-table.md",sourceDirName:"backend/Api Specifications",slug:"/api/save-get-table",permalink:"/I2T-docs/api/save-get-table",editUrl:"https://github.com/I2Tunimib/I2T-docs/docs/backend/Api Specifications/save-get-table.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{id:"save-table-get-table-api",slug:"/api/save-get-table",sidebar_position:1,title:"Save Table & Get Table API Data Format"},sidebar:"tutorialSidebar",previous:{title:"External services aggregator",permalink:"/I2T-docs/backend/services-aggregator"},next:{title:"Architecture",permalink:"/I2T-docs/frontend/architecture"}},s=[{value:"Save Table",id:"save-table",children:[{value:"Endpoint",id:"endpoint",children:[],level:3},{value:"Request Headers",id:"request-headers",children:[],level:3},{value:"Request Body Example",id:"request-body-example",children:[],level:3}],level:2},{value:"Get Table",id:"get-table",children:[{value:"Endpoint",id:"endpoint-1",children:[],level:3},{value:"Request Headers",id:"request-headers-1",children:[],level:3},{value:"Response Body Example",id:"response-body-example",children:[],level:3}],level:2},{value:"Notes",id:"notes",children:[],level:2},{value:"Differences Between Save Table and Get Table Example Files",id:"differences-between-save-table-and-get-table-example-files",children:[{value:"1. Top-level Structure",id:"1-top-level-structure",children:[],level:3},{value:"2. Table Object",id:"2-table-object",children:[],level:3},{value:"3. Columns",id:"3-columns",children:[],level:3},{value:"4. Data Differences",id:"4-data-differences",children:[],level:3},{value:"5. Usage",id:"5-usage",children:[],level:3}],level:2}],d={toc:s};function p({components:e,...n}){return(0,l.kt)("wrapper",(0,a.Z)({},d,n,{components:e,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"save-table--get-table-api-data-format"},"Save Table & Get Table API Data Format"),(0,l.kt)("p",null,"This document describes how data is passed when calling the ",(0,l.kt)("strong",{parentName:"p"},"Save Table")," and ",(0,l.kt)("strong",{parentName:"p"},"Get Table")," endpoints in the I2T-backend API. Example payloads are provided based on the files in ",(0,l.kt)("inlineCode",{parentName:"p"},"sample_jsons/get_table_sample.json")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"sample_jsons/updateTable_sample.json"),"."),(0,l.kt)("h2",{id:"save-table"},"Save Table"),(0,l.kt)("h3",{id:"endpoint"},"Endpoint"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-http"},"PUT /api/dataset/:datasetId/table/:tableId\n")),(0,l.kt)("h3",{id:"request-headers"},"Request Headers"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"x-table-dataset-info"),": Contains metadata in the format ",(0,l.kt)("inlineCode",{parentName:"li"},"tableId:<id>;datasetId:<id>;deletedCols:<col1,col2,...>")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"Content-Type: application/json"))),(0,l.kt)("h3",{id:"request-body-example"},"Request Body Example"),(0,l.kt)("p",null,"Here's an updated example including the ",(0,l.kt)("inlineCode",{parentName:"p"},'"rows"')," data:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "tableInstance": {\n    "id": "108",\n    "idDataset": "4",\n    "name": "table_2_1",\n    "nCols": 7,\n    "nRows": 20,\n    "nCells": 140,\n    "nCellsReconciliated": 65,\n    "lastModifiedDate": "2025-07-10T07:52:14.580Z"\n  },\n  "columns": {\n    "byId": {\n      "Football Club": {\n        "id": "Football Club",\n        "label": "Football Club",\n        "status": "pending",\n        "context": {\n          "wd": {\n            "prefix": "wd:",\n            "uri": "https://www.wikidata.org/entity/",\n            "total": 20,\n            "reconciliated": 4\n          }\n        },\n        "metadata": [\n          {\n            "property": [\n              {\n                "id": "wd:P286",\n                "obj": "Manager",\n                "match": true,\n                "name": "head coach",\n                "score": 1\n              },\n              {\n                "id": "wd:P634",\n                "obj": "Team Captain",\n                "match": true,\n                "name": "captain",\n                "score": 1\n              },\n              {\n                "id": "wd:P5995",\n                "obj": "Supplier",\n                "match": true,\n                "name": "kit supplier",\n                "score": 1\n              },\n              {\n                "id": "wd:P859",\n                "obj": "Sponsor",\n                "match": true,\n                "name": "sponsor",\n                "score": 1\n              },\n              {\n                "id": "wd:P571",\n                "obj": "Match Date",\n                "match": true,\n                "name": "inception",\n                "score": 1\n              }\n            ]\n          }\n        ],\n        "annotationMeta": {\n          "annotated": true,\n          "match": {\n            "value": {\n              "value": false\n            }\n          },\n          "lowestScore": 81,\n          "highestScore": 100\n        },\n        "kind": "entity",\n        "role": "subject"\n      }\n    },\n    "allIds": [\n      "Football Club",\n      "Manager",\n      "Team Captain",\n      "Supplier",\n      "Main Sponsor",\n      "Match Date",\n      "Match Location"\n    ]\n  },\n  "rows": {\n    "byId": {\n      "r0": {\n        "id": "r0",\n        "cells": {\n          "Football Club": {\n            "id": "r0$Football Club",\n            "label": "Arsenal",\n            "metadata": [\n              {\n                "name": {\n                  "value": "Arsenal F.C.",\n                  "uri": "https://www.wikidata.org/wiki/Q9617"\n                },\n                "id": "wd:Q9617",\n                "description": "association football club in London, England",\n                "match": false,\n                "score": 100,\n                "type": [\n                  {\n                    "id": "Q476028",\n                    "name": "association football club"\n                  }\n                ]\n              },\n              {\n                "name": {\n                  "value": "FC Arsenal Kyiv",\n                  "uri": "https://www.wikidata.org/wiki/Q44295"\n                },\n                "id": "wd:Q44295",\n                "description": "professional football club based in Kyiv, Ukraine",\n                "match": false,\n                "score": 100,\n                "type": [\n                  {\n                    "id": "Q476028",\n                    "name": "association football club"\n                  }\n                ]\n              },\n              {\n                "name": {\n                  "value": "arsenal",\n                  "uri": "https://www.wikidata.org/wiki/Q81669"\n                },\n                "id": "wd:Q81669",\n                "description": "place for arms and ammunition",\n                "match": false,\n                "score": 100,\n                "type": []\n              }\n            ],\n            "annotationMeta": {\n              "annotated": true,\n              "match": {\n                "value": false\n              },\n              "lowestScore": 100,\n              "highestScore": 100\n            }\n          }\n        }\n      }\n    },\n    "allIds": [\n      "r0",\n      "r1",\n      "r2",\n      "r3",\n      "r4",\n      "r5",\n      "r6",\n      "r7",\n      "r8",\n      "r9",\n      "r10",\n      "r11",\n      "r12",\n      "r13",\n      "r14",\n      "r15",\n      "r16",\n      "r17",\n      "r18",\n      "r19"\n    ]\n  }\n}\n')),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"The ",(0,l.kt)("inlineCode",{parentName:"li"},"tableInstance")," field contains metadata about the table."),(0,l.kt)("li",{parentName:"ul"},"The ",(0,l.kt)("inlineCode",{parentName:"li"},"columns.byId")," field contains column definitions and metadata.")),(0,l.kt)("h2",{id:"get-table"},"Get Table"),(0,l.kt)("h3",{id:"endpoint-1"},"Endpoint"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"GET /api/dataset/:datasetId/table/:tableId\n")),(0,l.kt)("h3",{id:"request-headers-1"},"Request Headers"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"x-table-dataset-info"),": Contains metadata in the format ",(0,l.kt)("inlineCode",{parentName:"li"},"tableId:<id>;datasetId:<id>"))),(0,l.kt)("h3",{id:"response-body-example"},"Response Body Example"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "table": {\n    "id": "108",\n    "idDataset": "4",\n    "name": "table_2_1",\n    "nCols": 7,\n    "nRows": 20,\n    "nCells": 140,\n    "nCellsReconciliated": 63,\n    "lastModifiedDate": "2025-06-16T09:13:03.016Z"\n  },\n  "columns": {\n    "Football Club": {\n      "id": "Football Club",\n      "label": "Football Club",\n      "status": "pending",\n      "context": {\n        "wd": {\n          "prefix": "wd:",\n          "uri": "https://www.wikidata.org/entity/",\n          "total": 20,\n          "reconciliated": 2\n        }\n      },\n      "metadata": [\n        {\n          "property": [\n            {\n              "id": "wd:P286",\n              "obj": "Manager",\n              "match": true,\n              "name": "head coach",\n              "score": 1\n            },\n            {\n              "id": "wd:P634",\n              "obj": "Team Captain",\n              "match": true,\n              "name": "captain",\n              "score": 1\n            },\n            {\n              "id": "wd:P5995",\n              "obj": "Supplier",\n              "match": true,\n              "name": "kit supplier",\n              "score": 1\n            },\n            {\n              "id": "wd:P859",\n              "obj": "Sponsor",\n              "match": true,\n              "name": "sponsor",\n              "score": 1\n            }\n          ]\n        }\n      ]\n    }\n  },\n  "rows": {\n    "r0": {\n      "id": "r0",\n      "cells": {\n        "Football Club": {\n          "id": "r0$Football Club",\n          "label": "Arsenal",\n          "metadata": [\n            {\n              "name": {\n                "value": "Arsenal F.C.",\n                "uri": "https://www.wikidata.org/wiki/Q9617"\n              },\n              "id": "wd:Q9617",\n              "description": "association football club in London, England",\n              "match": false,\n              "score": 100,\n              "type": [\n                {\n                  "id": "Q476028",\n                  "name": "association football club"\n                }\n              ]\n            }\n          ],\n          "annotationMeta": {\n            "annotated": true,\n            "match": {\n              "value": false\n            },\n            "lowestScore": 100,\n            "highestScore": 100\n          }\n        }\n      }\n    }\n    // ...other rows...\n  },\n  "allIds": [\n    "r0",\n    "r1",\n    "r2",\n    "r3",\n    "r4",\n    "r5",\n    "r6",\n    "r7",\n    "r8",\n    "r9",\n    "r10",\n    "r11",\n    "r12",\n    "r13",\n    "r14",\n    "r15",\n    "r16",\n    "r17",\n    "r18",\n    "r19"\n  ]\n}\n')),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"The ",(0,l.kt)("inlineCode",{parentName:"li"},"table")," field contains metadata about the table."),(0,l.kt)("li",{parentName:"ul"},"The ",(0,l.kt)("inlineCode",{parentName:"li"},"columns")," field contains column definitions and metadata.")),(0,l.kt)("h2",{id:"notes"},"Notes"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"The ",(0,l.kt)("inlineCode",{parentName:"li"},"x-table-dataset-info")," header is required for logging and tracking operations."),(0,l.kt)("li",{parentName:"ul"},"The ",(0,l.kt)("inlineCode",{parentName:"li"},"deletedCols")," field is only relevant for the Save Table operation."),(0,l.kt)("li",{parentName:"ul"},"All data is passed as JSON.")),(0,l.kt)("h2",{id:"differences-between-save-table-and-get-table-example-files"},"Differences Between Save Table and Get Table Example Files"),(0,l.kt)("p",null,"The sample files for Save Table (",(0,l.kt)("inlineCode",{parentName:"p"},"updateTable_sample.json"),") and Get Table (",(0,l.kt)("inlineCode",{parentName:"p"},"get_table_sample.json"),") have some important structural differences:"),(0,l.kt)("h3",{id:"1-top-level-structure"},"1. Top-level Structure"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Get Table (",(0,l.kt)("inlineCode",{parentName:"strong"},"get_table_sample.json"),"):"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"The main table object is under the key ",(0,l.kt)("inlineCode",{parentName:"li"},'"table"'),"."),(0,l.kt)("li",{parentName:"ul"},"Columns are under ",(0,l.kt)("inlineCode",{parentName:"li"},'"columns"'),"."))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Save Table (",(0,l.kt)("inlineCode",{parentName:"strong"},"updateTable_sample.json"),"):"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"The main table object is under the key ",(0,l.kt)("inlineCode",{parentName:"li"},'"tableInstance"'),"."),(0,l.kt)("li",{parentName:"ul"},"Columns are under ",(0,l.kt)("inlineCode",{parentName:"li"},'"columns.byId"'),".")))),(0,l.kt)("h3",{id:"2-table-object"},"2. Table Object"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Get Table:"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},'"table"')," contains properties like ",(0,l.kt)("inlineCode",{parentName:"li"},"id"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"idDataset"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"name"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"nCols"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"nRows"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"nCells"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"nCellsReconciliated"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"lastModifiedDate"),"."))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Save Table:"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},'"tableInstance"')," contains similar properties, but values may be updated (e.g., ",(0,l.kt)("inlineCode",{parentName:"li"},"nCellsReconciliated"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"lastModifiedDate"),").")))),(0,l.kt)("h3",{id:"3-columns"},"3. Columns"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Get Table:"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},'"columns"')," is a flat object with column names as keys."))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Save Table:"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},'"columns"')," contains a ",(0,l.kt)("inlineCode",{parentName:"li"},'"byId"')," object, which then has column names as keys.")))),(0,l.kt)("h3",{id:"4-data-differences"},"4. Data Differences"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"The actual data (e.g., number of reconciliated cells, last modified date) may differ between the two files, reflecting the state before and after a save operation.")),(0,l.kt)("h3",{id:"5-usage"},"5. Usage"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Get Table")," is used to retrieve the current state of a table and its columns."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Save Table")," is used to update the table, and the structure is slightly more nested to support updates.")),(0,l.kt)("p",null,"For more details, see the sample files in ",(0,l.kt)("inlineCode",{parentName:"p"},"I2T-backend/sample_jsons/"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"get_table_sample.json")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"updateTable_sample.json"))))}p.isMDXComponent=!0}}]);