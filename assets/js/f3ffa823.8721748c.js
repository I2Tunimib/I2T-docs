"use strict";(self.webpackChunktest=self.webpackChunktest||[]).push([[544],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>u});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=a.createContext({}),c=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},p=function(e){var n=c(e.components);return a.createElement(l.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),m=c(t),u=r,h=m["".concat(l,".").concat(u)]||m[u]||d[u]||o;return t?a.createElement(h,s(s({ref:n},p),{},{components:t})):a.createElement(h,s({ref:n},p))}));function u(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,s=new Array(o);s[0]=m;var i={};for(var l in n)hasOwnProperty.call(n,l)&&(i[l]=n[l]);i.originalType=e,i.mdxType="string"==typeof e?e:r,s[1]=i;for(var c=2;c<o;c++)s[c]=t[c];return a.createElement.apply(null,s)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},8215:(e,n,t)=>{t.d(n,{Z:()=>r});var a=t(7294);const r=function({children:e,hidden:n,className:t}){return a.createElement("div",{role:"tabpanel",hidden:n,className:t},e)}},6396:(e,n,t)=>{t.d(n,{Z:()=>m});var a=t(7462),r=t(7294),o=t(2389),s=t(9443);const i=function(){const e=(0,r.useContext)(s.Z);if(null==e)throw new Error('"useUserPreferencesContext" is used outside of "Layout" component.');return e};var l=t(3810),c=t(6010);const p="tabItem_vU9c";function d(e){const{lazy:n,block:t,defaultValue:a,values:o,groupId:s,className:d}=e,m=r.Children.map(e.children,(e=>{if((0,r.isValidElement)(e)&&void 0!==e.props.value)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),u=o??m.map((({props:{value:e,label:n}})=>({value:e,label:n}))),h=(0,l.lx)(u,((e,n)=>e.value===n.value));if(h.length>0)throw new Error(`Docusaurus error: Duplicate values "${h.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const v=null===a?a:a??m.find((e=>e.props.default))?.props.value??m[0]?.props.value;if(null!==v&&!u.some((e=>e.value===v)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${v}" but none of its children has the corresponding value. Available values are: ${u.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:f,setTabGroupChoices:b}=i(),[g,k]=(0,r.useState)(v),y=[],{blockElementScrollPositionUntilNextRender:x}=(0,l.o5)();if(null!=s){const e=f[s];null!=e&&e!==g&&u.some((n=>n.value===e))&&k(e)}const w=e=>{const n=e.currentTarget,t=y.indexOf(n),a=u[t].value;a!==g&&(x(n),k(a),null!=s&&b(s,a))},N=e=>{let n=null;switch(e.key){case"ArrowRight":{const t=y.indexOf(e.currentTarget)+1;n=y[t]||y[0];break}case"ArrowLeft":{const t=y.indexOf(e.currentTarget)-1;n=y[t]||y[y.length-1];break}}n?.focus()};return r.createElement("div",{className:"tabs-container"},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,c.Z)("tabs",{"tabs--block":t},d)},u.map((({value:e,label:n})=>r.createElement("li",{role:"tab",tabIndex:g===e?0:-1,"aria-selected":g===e,className:(0,c.Z)("tabs__item",p,{"tabs__item--active":g===e}),key:e,ref:e=>y.push(e),onKeyDown:N,onFocus:w,onClick:w},n??e)))),n?(0,r.cloneElement)(m.filter((e=>e.props.value===g))[0],{className:"margin-vert--md"}):r.createElement("div",{className:"margin-vert--md"},m.map(((e,n)=>(0,r.cloneElement)(e,{key:n,hidden:e.props.value!==g})))))}function m(e){const n=(0,o.Z)();return r.createElement(d,(0,a.Z)({key:String(n)},e))}},3172:(e,n,t)=>{t.r(n),t.d(n,{frontMatter:()=>i,contentTitle:()=>l,metadata:()=>c,toc:()=>p,default:()=>m});var a=t(7462),r=(t(7294),t(3905)),o=t(6396),s=t(8215);const i={sidebar_position:5},l="External services aggregator",c={unversionedId:"backend/services-aggregator",id:"backend/services-aggregator",title:"External services aggregator",description:"Many services might be available to perform operations required for the Semantic Enrichment of a table. For example, multiple services can provide their own logic to perform a STI approach and generate annotations for a given table. Some other services might",source:"@site/docs/backend/services-aggregator.md",sourceDirName:"backend",slug:"/backend/services-aggregator",permalink:"/I2T-docs/backend/services-aggregator",editUrl:"https://github.com/I2Tunimib/I2T-docs/docs/backend/services-aggregator.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"Dataset handler",permalink:"/I2T-docs/backend/dataset-handler"},next:{title:"Save Table & Get Table API Data Format",permalink:"/I2T-docs/api/save-get-table"}},p=[{value:"Server startup",id:"server-startup",children:[],level:2},{value:"Query an external service",id:"query-an-external-service",children:[],level:2},{value:"Add a new service",id:"add-a-new-service",children:[{value:"index.js",id:"indexjs",children:[{value:"Service Components",id:"service-components",children:[],level:4}],level:3},{value:"requestTransformer.js",id:"requesttransformerjs",children:[],level:3},{value:"responseTransformer.js",id:"responsetransformerjs",children:[],level:3}],level:2}],d={toc:p};function m({components:e,...n}){return(0,r.kt)("wrapper",(0,a.Z)({},d,n,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"external-services-aggregator"},"External services aggregator"),(0,r.kt)("p",null,"Many services might be available to perform operations required for the Semantic Enrichment of a table. For example, multiple services can provide their own logic to perform a STI approach and generate annotations for a given table. Some other services might\noperate only on some of the annotation levels, i.e.: reconciliators that provide instance-level annotations for the table cells, or reconciliators that work\non the schema-level annotation of the table, mapping columns to ontology\nconcepts, determine the subject, named-entity, or literal column, or finding\nrelations between pairs of columns."),(0,r.kt)("p",null,"The service aggregator layer is built in such a way that new external services can be integrated by developers following the framework structure."),(0,r.kt)("p",null,"In the current version of SemTUI there are two types of services:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("em",{parentName:"li"},"reconciliators"),": perform the reconciliation of labels against a KG, and in general providing annotation for CEA,\nCTA and CPA (with partial annotation, or full table annotation)."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("em",{parentName:"li"},"extenders"),": allow the users to extend one or more column with information from other\ndatasets enriching the original data table.")),(0,r.kt)("h2",{id:"server-startup"},"Server startup"),(0,r.kt)("p",null,"As soon as the server spins up, all described services are parsed and validated against a schema. An unsuccessful parsing of a service will result in a validation error.\nInvalid services won't be available at runtime."),(0,r.kt)("p",null,"The user will be prompted with the following information on startup:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"Reconciliators\n\n\u2716 service1\nErrors:\n1. detailed validation error\n\n\u2714 service2\n\u2714 service3\n\u2714 service4\n\nExtenders\n\n\u2714 service1\n\u2714 service2\n\u2714 service3\n\n")),(0,r.kt)("h2",{id:"query-an-external-service"},"Query an external service"),(0,r.kt)("p",null,"Once a client connects to the\nserver, a configuration for all the supplied services is sent to the client where\nit is parsed, displaying available services and their settings to the user. When\na request to a service is sent from the client to the server, a pipeline executes the transformation functions specified to query the service and return\nits result. An additional post processing is applied to the final response to\ncompute some statistics necessary for the application. The post processing is\nplaced on top of the transformation functions provided by the user, so that\nfurther services additions do not need to explicitly tell the system how to\ncompute those statistics."),(0,r.kt)("div",{style:{textAlign:"center"}},(0,r.kt)("img",{src:"/I2T-docs/img/query-service.png"})),(0,r.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"Two different pipeline exists for reconciliators and extenders services. They can be found in ",(0,r.kt)("inlineCode",{parentName:"p"},"./api/services/extension/extension-pipeline.js")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"./api/services/reconciliation/reconciliation-pipeline.js"),"."))),(0,r.kt)("h2",{id:"add-a-new-service"},"Add a new service"),(0,r.kt)("p",null,"Services are situated in the ",(0,r.kt)("inlineCode",{parentName:"p"},"services")," folder at the root of the application. They are grouped by their core functionality. At the moment there are services of types ",(0,r.kt)("inlineCode",{parentName:"p"},"reconciliator")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"extender"),". Each service is constitued by three components:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'title="Service structure"',title:'"Service','structure"':!0},"\ud83d\udce6serviceId\n \u2523 \ud83d\udcdcindex.js\n \u2523 \ud83d\udcdcrequestTransformer.js\n \u2517 \ud83d\udcdcresponseTransformer.js\n")),(0,r.kt)("h3",{id:"indexjs"},"index.js"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"index.js")," file contains characteristics of the service you want to add."),(0,r.kt)("h4",{id:"service-components"},"Service Components"),(0,r.kt)("p",null,"To make the creation of a service easier, some objects have been defined to describe the available components:"),(0,r.kt)(o.Z,{mdxType:"Tabs"},(0,r.kt)(s.Z,{value:"formComponents",label:"Form components",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'export const FormComponents = {\n  /**\n   * builds a checkbox component. A property \'options\' must be specified with an array of option objects.\n   */\n  checkbox: "checkbox",\n  /**\n   * builds an input text component\n   */\n  text: "text",\n  /**\n   * builds a select component. A property \'options\' must be specified with an array of option objects.\n   */\n  select: "select",\n  /**\n   * builds a select component where each option is a column of the table\n   */\n  selectColumns: "selectColumns",\n};\n'))),(0,r.kt)(s.Z,{value:"formFieldRules",label:"Form field rules",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'export const FormFieldRules = {\n  /**\n   * the field is required. If a required rule isn\'t specified, the field is treated as optional\n   */\n  required: "required",\n};\n'))),(0,r.kt)(s.Z,{value:"metaToViewComponents",label:"Meta to view components",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'export const MetaToViewComponents = {\n  /**\n   * builds a cell containing a link\n   */\n  link: "link",\n  /**\n   * builds a cell which can be used to create a subrow with the metadata content\n   */\n  sublist: "subList",\n  /**\n   * builds a cell containing a tag\n   */\n  tag: "tag",\n};\n')))),(0,r.kt)(o.Z,{mdxType:"Tabs"},(0,r.kt)(s.Z,{value:"structure",label:"Reconciliator - File structure",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'// be sure to export the object as default\nexport default {\n  // private properties are kept on the server\n  private: {\n    // specifies the endpoint to the external service in the environment file (.env)\n    endpoint: process.env.ENVIRONMENT_VARIABLE,\n    // if true the request is processed to return unique values (labels/metadataIds)\n    // the req object contains two objects \'original\' with\n    // the original request and \'processed\' with the processed request. Defaults to false\n    processRequest: false,\n  },\n  // public properties are sent to the client\n  public: {\n    // name of the service (shown in the UI)\n    name: "",\n    // a description to give the user informations about this service (shown in the UI).\n    // It supports HTML markup syntax.\n    description: "",\n    // relative URL which will be queried from the client. e.g.: /reconciliators/asia/geonames\n    relativeUrl: "",\n    // (e.g: geo, wd, dbp)\n    prefix: "",\n    // base URI of the resources returned from this service\n    uri: "",\n    // specify how to visualize metadata information\n    metaToView: {},\n    // specify how to render the form to query the extension service\n    // each object of the array identifies a form field. Can be empty.\n    formParams: [],\n  },\n};\n')),(0,r.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},(0,r.kt)("inlineCode",{parentName:"p"},"Type")," corresponds to a UI componenent. Check ",(0,r.kt)("a",{parentName:"p",href:"/I2T-docs/frontend/metadata-components"},"here")," how to add new UI component. If ",(0,r.kt)("inlineCode",{parentName:"p"},"type")," is omitted the field is treated as text. The data fields included\nin the object will be displayed in the UI, meanwhile all others fields are left out of the visualization.")))),(0,r.kt)(s.Z,{value:"exampleRecon",label:"Reconciliator - Example",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'import { MetaToViewComponents } from "../../../schemas/constants";\n\nexport default {\n  private: {\n    endpoint: process.env.ASIA_RECONCILIATION,\n    // if true the request is processed to return unique values (labels/metadataIds)\n    // the req object contains two objects \'original\' with\n    // the original request and \'processed\' with the processed request\n    processRequest: false,\n  },\n  public: {\n    name: "ASIA (geonames)",\n    prefix: "geo",\n    relativeUrl: "/asia/geonames",\n    description:\n      "Reconcile entities to Geonames using ASIA. This service might prove useful when reconciling geospatial entities (places).",\n    uri: "http://www.geonames.org/",\n    metaToView: {\n      id: {\n        label: "ID",\n      },\n      name: {\n        label: "Name",\n        type: MetaToViewComponents.link,\n      },\n      score: {\n        label: "Score",\n      },\n      type: {\n        label: "Types",\n        type: MetaToViewComponents.sublist,\n      },\n      match: {\n        label: "Match",\n        type: MetaToViewComponents.tag,\n      },\n    },\n  },\n};\n')),(0,r.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},(0,r.kt)("inlineCode",{parentName:"p"},"Type")," corresponds to a UI componenent. Check ",(0,r.kt)("a",{parentName:"p",href:"/I2T-docs/frontend/metadata-components"},"here")," how to add new UI component. If ",(0,r.kt)("inlineCode",{parentName:"p"},"type")," is omitted the field is treated as text. The data fields included\nin the object will be displayed in the UI, meanwhile all others fields are left out of the visualization."))))),(0,r.kt)(o.Z,{mdxType:"Tabs"},(0,r.kt)(s.Z,{value:"structureExtender",label:"Extender - File structure",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'// be sure to export the object as default\nexport default {\n  // private properties are kept on the server\n  private: {\n    // endpoint to the external service specified in the environment file (.env)\n    endpoint: process.env.ENVIRONMENT_VARIABLE,\n  },\n  // public properties are sent to the client\n  public: {\n    // name of the service (shown in the UI)\n    name: "",\n    // a description to give the user informations about this service (shown in the UI).\n    // It supports HTML markup syntax.\n    description: "",\n    // relative URL which will be queried from the client. e.g.: /reconciliators/asia/geonames\n    relativeUrl: "",\n    // specify how to render the form to query the extension service\n    // each object of the array identifies a form field. Can be empty.\n    formParams: [],\n  },\n};\n'))),(0,r.kt)(s.Z,{value:"exampleExt",label:"Extender - Example",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'import { FormComponents, FormFieldRules } from "../../../schemas/constants";\n\nexport default {\n  private: {\n    endpoint: process.env.ASIA_EXTENSION,\n  },\n  public: {\n    nname: "ASIA (geonames)",\n    relativeUrl: "/asia/geonames",\n    description:\n      "ASIA extension service based on geonames allows to extend a column with data on locations of a certain administrative order. The input column has to be reconciliated against geonames entities.",\n    formParams: [\n      {\n        id: "property",\n        description: "Select on or more <b>Property</b> values:",\n        label: "Property",\n        inputType: FormComponents.checkbox,\n        rules: [FormFieldRules.required],\n        options: [\n          {\n            id: "adm1",\n            label: "First-order administrative division (Regions or States)",\n            value: "parentADM1",\n          },\n          {\n            id: "adm2",\n            label: "Second-order administrative division (Provinces)",\n            value: "parentADM2",\n          },\n          {\n            id: "adm3",\n            label: "Third-order administrative division (Communes)",\n            value: "parentADM3",\n          },\n          {\n            id: "adm4",\n            label: "Fourth-order administrative division",\n            value: "parentADM4",\n          },\n        ],\n      },\n    ],\n  },\n};\n')))),(0,r.kt)("h3",{id:"requesttransformerjs"},"requestTransformer.js"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"requestTransformer.js")," file contains a transformation function which transform the client request to the format necessary to query the external service. The function returns the response from the external service. Each ",(0,r.kt)("strong",{parentName:"p"},"requestTransformer")," receives ",(0,r.kt)("strong",{parentName:"p"},"req")," which contains:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"original"),": the original request to the server"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"processed")," (",(0,r.kt)("em",{parentName:"li"},"optional"),"): the processed request to the server if the specified configuration for the service contains ",(0,r.kt)("inlineCode",{parentName:"li"},"processRequest")," set to ",(0,r.kt)("strong",{parentName:"li"},"true"),".")),(0,r.kt)(o.Z,{mdxType:"Tabs"},(0,r.kt)(s.Z,{value:"structure",label:"File structure",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"import config from './index';\n// library to perform http requests\nimport axios from 'axios';\n\nconst { endpoint } = config.private;\n\n// be sure to export the function as default\nexport default async (req) => {\n  const { items } = req.processed;\n\n  // transformation function applied to the request items to query the service\n  const formBody = ...\n\n  const response = await axios.post(`${endpoint}/geonames`, formBody)\n  return response.data;\n}\n"))),(0,r.kt)(s.Z,{value:"example",label:"Example",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'import config from "./index";\nimport axios from "axios";\n\nconst { endpoint } = config.private;\n\nexport default async (req) => {\n  const { items } = req.processed;\n\n  const queries = Object.keys(items).reduce(\n    (acc, label) => ({\n      ...acc,\n      [label]: { query: encodeURIComponent(label || "") },\n    }),\n    {}\n  );\n\n  const formBody = "queries=" + JSON.stringify(queries);\n  const response = await axios.post(`${endpoint}/geonames`, formBody);\n\n  return response.data;\n};\n')))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Reconciliation")," and ",(0,r.kt)("strong",{parentName:"p"},"extension")," requests have the following formats:"),(0,r.kt)(o.Z,{mdxType:"Tabs"},(0,r.kt)(s.Z,{value:"recReqOrig",label:"Reconciliation request (original)",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "serviceId":"asiaGeonames",\n  "items":[\n    {"id":"r0$StrCity","label":"Kirchheim unter Teck"},\n    {"id":"r1$StrCity","label":"Herrenberg"},\n    {"id":"r2$StrCity","label":"Baden-Baden"},\n    {"id":"r3$StrCity","label":"Aalen"},\n    ...\n  ]\n}\n'))),(0,r.kt)(s.Z,{value:"recReqProc",label:"Reconciliation request (processed)",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "items": {\n    "Kirchheim unter Teck": ["r0$StrCity"],\n    "Herrenberg": ["r1$StrCity"],\n    "Baden-Baden": ["r2$StrCity"],\n    // 3 cells have the same label "Aalen"\n    "Aalen": ["r3$StrCity", "r4$StrCity", "r5$StrCity"],\n    ...\n  }\n}\n')))),(0,r.kt)(o.Z,{mdxType:"Tabs"},(0,r.kt)(s.Z,{value:"extReqOrig",label:"Extension request (original)",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "serviceId":"asiaGeonames",\n  "items":{\n    // column\n    "Match Location":{\n      "r0":"geo:6557942",\n      "r1":"geo:6557935",\n      "r2":"geo:6555605",\n      "r3":"geo:6558032",\n      "r4":"geo:6558054"\n    },\n  },\n  // additional properties for the specific extender service\n  "property":["parentADM1"],\n  ...\n}\n'))),(0,r.kt)(s.Z,{value:"extReqProc",label:"Extension request (processed)",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "items":{\n    // column\n    "Match Location":{\n      "geo:6557942": ["r0", "r5", "r7"],\n      "geo:6557935": ["r1"],\n      "geo:6555605": ["r2"],\n      "geo:6558032": ["r3"],\n      "geo:6558054": ["r4"],\n      ...\n    },\n  },\n  "props": {\n    // additional properties for the specific extender service\n    "property":["parentADM1"],\n    ...\n  }\n}\n')))),(0,r.kt)("h3",{id:"responsetransformerjs"},"responseTransformer.js"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"responseTransformer.js")," file contains a transformation function which transform the response of the external service to a standard format so that the frontend application always receives the same data to operate on:"),(0,r.kt)(o.Z,{mdxType:"Tabs"},(0,r.kt)(s.Z,{value:"structure",label:"Reconciliator - File structure",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"// be sure to export the function as default\n// the function receives as input the request object of the requestTransformer\n// (req) and the response from the external service (res)\nexport default async (req, res) => {\n  const { items } = req.processed;\n\n  // transformation function applied to the response (res) of the requestTransformer\n  const response = ...\n  return response;\n}\n"))),(0,r.kt)(s.Z,{value:"recExample",label:"Reconciliator - Example",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"export default async (req, res) => {\n  const { items } = req.processed;\n\n  const response = Object.keys(res).flatMap((label) => {\n    const metadata = res[label].result.map(({ id, ...rest }) => ({\n      id: `geo:${id}`,\n      ...rest,\n    }));\n\n    return items[label].map((cellId) => ({\n      id: cellId,\n      metadata,\n    }));\n  });\n\n  return response;\n};\n")))),(0,r.kt)(o.Z,{mdxType:"Tabs"},(0,r.kt)(s.Z,{value:"extStructure",label:"Extender - File structure",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"// be sure to export the function as default\n// the function receives as input the request object from the requestTransformer\n// (req) and the response from the external service (res)\nexport default async (req, res) => {\n  const { items } = req.processed;\n  // input columns ids from the request items\n  const inputColumns = Object.keys(items);\n\n  let response = {\n    // columns entities to be added\n    columns: {},\n    // mapping between the new column obtained from extension of the input column (i.e.: { newColumnId: inputColumnId })\n    // meta is used to place the new columns in the correct order in the UI.\n    meta: {}\n  }\n\n  // transformation function to obtain the response\n  ...\n\n  return response;\n}\n\n"))),(0,r.kt)(s.Z,{value:"extExample",label:"Extender - Example",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const getMetadata = (metaRaw) => {\n  return metaRaw.map(({ id, name }) => ({\n    id: `geo:${id}`,\n    name,\n    score: 100,\n    match: true,\n  }));\n};\n\nexport default async (req, res) => {\n  const { items } = req.processed;\n  const inputColumns = Object.keys(items);\n\n  let response = {\n    columns: {},\n    meta: {},\n  };\n\n  // each input column generated a response from the external service\n  res.forEach((serviceResponse, colIndex) => {\n    const { meta, rows } = serviceResponse.res;\n\n    meta.forEach((property) => {\n      const { id: propId } = property;\n      const colId = `${inputColumns[colIndex]}_${propId}`;\n      // create columns\n      response.columns[colId] = {\n        label: colId,\n        metadata: [],\n        cells: {},\n      };\n      // add columns mapping\n      response.meta = {\n        ...response.meta,\n        [colId]: inputColumns[colIndex],\n      };\n\n      // add cells to each column\n      Object.keys(rows).forEach((metadataId) => {\n        // get rows for each metaId\n        const requestRowsIds =\n          items[inputColumns[colIndex]][`geo:${metadataId}`];\n\n        // build cells\n        const cells = requestRowsIds.reduce((acc, rowId) => {\n          const cellMetadata = getMetadata(rows[metadataId][property.id]);\n\n          acc[rowId] =\n            cellMetadata && cellMetadata.length > 0\n              ? {\n                  label: cellMetadata[0].name,\n                  metadata: cellMetadata,\n                }\n              : null;\n          return acc;\n        }, {});\n\n        // add cells to column\n        response.columns[colId].cells = {\n          ...response.columns[colId].cells,\n          ...cells,\n        };\n      });\n    });\n  });\n\n  return response;\n};\n")))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Reconciliation")," and ",(0,r.kt)("strong",{parentName:"p"},"extension")," responses have the following formats:"),(0,r.kt)(o.Z,{mdxType:"Tabs"},(0,r.kt)(s.Z,{value:"recReq",label:"Reconciliation response",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'[\n  {\n    "id": "r1$StrCity",\n    // follows the w3c standard for the representation of the annotations\n    "metadata":[\n      {\n        "id": "geo:6555605",\n        "name": "Baden-Baden",\n        "type": [\n          { "id": "A.ADM4", "name": "A.ADM4"}\n        ],\n        "score": 138.1361083984375,\n        "match": false\n      },\n      ...\n    ]\n  },\n  {\n    "id": "r2$StrCity",\n    "metadata":[...]\n  },\n  {\n    "id": "r3$StrCity",\n    "metadata":[...]\n  },\n  ...\n]\n'))),(0,r.kt)(s.Z,{value:"extReq",label:"Extension response",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "columns": {\n    "StrCity_parentADM1": {\n      "label": "StrCity_parentADM1",\n      "metadata": [],\n      "cells": {\n        "r1": {\n          "label": "Lucerne",\n          "metadata": [\n            {\n              "id": "geo:2659810",\n              "name": "Lucerne",\n              "score": 100,\n              "match": true\n            }\n          ]\n        },\n        "r2": {\n          "label": "Victoria",\n          "metadata": [\n            {\n              "id": "geo:2145234",\n              "name": "Victoria",\n              "score": 100,\n              "match": true\n            }\n          ]\n        },\n        ...\n      }\n    }\n  },\n  "meta": {\n    "StrCity_parentADM1": "StrCity"\n  }\n}\n')))),(0,r.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"You can prevent a configured service from being loaded into the runtime of the server using the ",(0,r.kt)("inlineCode",{parentName:"p"},"exclude")," field in the initial configuration, as described ",(0,r.kt)("a",{parentName:"p",href:"/I2T-docs/backend/config#configuration"},"here"),"."))))}m.isMDXComponent=!0}}]);