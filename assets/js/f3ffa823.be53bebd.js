"use strict";(self.webpackChunktest=self.webpackChunktest||[]).push([[544],{3905:function(e,n,t){t.d(n,{Zo:function(){return p},kt:function(){return u}});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=r.createContext({}),c=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},p=function(e){var n=c(e.components);return r.createElement(l.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),m=c(t),u=a,f=m["".concat(l,".").concat(u)]||m[u]||d[u]||o;return t?r.createElement(f,i(i({ref:n},p),{},{components:t})):r.createElement(f,i({ref:n},p))}));function u(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=m;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var c=2;c<o;c++)i[c]=t[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},8215:function(e,n,t){var r=t(7294);n.Z=function(e){var n=e.children,t=e.hidden,a=e.className;return r.createElement("div",{role:"tabpanel",hidden:t,className:a},n)}},6396:function(e,n,t){t.d(n,{Z:function(){return m}});var r=t(7462),a=t(7294),o=t(2389),i=t(9443);var s=function(){var e=(0,a.useContext)(i.Z);if(null==e)throw new Error('"useUserPreferencesContext" is used outside of "Layout" component.');return e},l=t(3616),c=t(6010),p="tabItem_vU9c";function d(e){var n,t,r,o=e.lazy,i=e.block,d=e.defaultValue,m=e.values,u=e.groupId,f=e.className,h=a.Children.map(e.children,(function(e){if((0,a.isValidElement)(e)&&void 0!==e.props.value)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),v=null!=m?m:h.map((function(e){var n=e.props;return{value:n.value,label:n.label}})),b=(0,l.lx)(v,(function(e,n){return e.value===n.value}));if(b.length>0)throw new Error('Docusaurus error: Duplicate values "'+b.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var g=null===d?d:null!=(n=null!=d?d:null==(t=h.find((function(e){return e.props.default})))?void 0:t.props.value)?n:null==(r=h[0])?void 0:r.props.value;if(null!==g&&!v.some((function(e){return e.value===g})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+g+'" but none of its children has the corresponding value. Available values are: '+v.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var k=s(),y=k.tabGroupChoices,x=k.setTabGroupChoices,w=(0,a.useState)(g),N=w[0],T=w[1],I=[],j=(0,l.o5)().blockElementScrollPositionUntilNextRender;if(null!=u){var C=y[u];null!=C&&C!==N&&v.some((function(e){return e.value===C}))&&T(C)}var E=function(e){var n=e.currentTarget,t=I.indexOf(n),r=v[t].value;r!==N&&(j(n),T(r),null!=u&&x(u,r))},A=function(e){var n,t=null;switch(e.key){case"ArrowRight":var r=I.indexOf(e.currentTarget)+1;t=I[r]||I[0];break;case"ArrowLeft":var a=I.indexOf(e.currentTarget)-1;t=I[a]||I[I.length-1]}null==(n=t)||n.focus()};return a.createElement("div",{className:"tabs-container"},a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,c.Z)("tabs",{"tabs--block":i},f)},v.map((function(e){var n=e.value,t=e.label;return a.createElement("li",{role:"tab",tabIndex:N===n?0:-1,"aria-selected":N===n,className:(0,c.Z)("tabs__item",p,{"tabs__item--active":N===n}),key:n,ref:function(e){return I.push(e)},onKeyDown:A,onFocus:E,onClick:E},null!=t?t:n)}))),o?(0,a.cloneElement)(h.filter((function(e){return e.props.value===N}))[0],{className:"margin-vert--md"}):a.createElement("div",{className:"margin-vert--md"},h.map((function(e,n){return(0,a.cloneElement)(e,{key:n,hidden:e.props.value!==N})}))))}function m(e){var n=(0,o.Z)();return a.createElement(d,(0,r.Z)({key:String(n)},e))}},3172:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return c},contentTitle:function(){return p},metadata:function(){return d},toc:function(){return m},default:function(){return f}});var r=t(7462),a=t(3366),o=(t(7294),t(3905)),i=t(6396),s=t(8215),l=["components"],c={sidebar_position:5},p="External services aggregator",d={unversionedId:"backend/services-aggregator",id:"backend/services-aggregator",title:"External services aggregator",description:"Many services might be available to perform operations required for the Semantic Enrichment of a table. For example, multiple services can provide their own logic to perform a STI approach and generate annotations for a given table. Some other services might",source:"@site/docs/backend/services-aggregator.md",sourceDirName:"backend",slug:"/backend/services-aggregator",permalink:"/I2T-docs/backend/services-aggregator",editUrl:"https://github.com/I2Tunimib/I2T-docs/docs/backend/services-aggregator.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"Dataset handler",permalink:"/I2T-docs/backend/dataset-handler"},next:{title:"Architecture",permalink:"/I2T-docs/frontend/architecture"}},m=[{value:"Query an external service",id:"query-an-external-service",children:[],level:2},{value:"Add a new service",id:"add-a-new-service",children:[{value:"index.js",id:"indexjs",children:[],level:3},{value:"requestTransformer.js",id:"requesttransformerjs",children:[],level:3},{value:"responseTransformer.js",id:"responsetransformerjs",children:[],level:3}],level:2}],u={toc:m};function f(e){var n=e.components,t=(0,a.Z)(e,l);return(0,o.kt)("wrapper",(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"external-services-aggregator"},"External services aggregator"),(0,o.kt)("p",null,"Many services might be available to perform operations required for the Semantic Enrichment of a table. For example, multiple services can provide their own logic to perform a STI approach and generate annotations for a given table. Some other services might\noperate only on some of the annotation levels, i.e.: reconciliators that provide instance-level annotations for the table cells, or reconciliators that work\non the schema-level annotation of the table, mapping columns to ontology\nconcepts, determine the subject, named-entity, or literal column, or finding\nrelations between pairs of columns."),(0,o.kt)("p",null,"The service aggregator layer is built in such a way that new external services can be integrated by developers following the framework structure."),(0,o.kt)("p",null,"In the current version of SemTUI there are two types of services:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"reconciliators"),": perform the reconciliation of labels against a KG, and in general providing annotation for CEA,\nCTA and CPA (with partial annotation, or full table annotation)."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"extenders"),": allow the users to extend one or more column with information from other\ndatasets enriching the original data table.")),(0,o.kt)("h2",{id:"query-an-external-service"},"Query an external service"),(0,o.kt)("p",null,"Once a client connects to the\nserver, a configuration for all the supplied services is sent to the client where\nit is parsed, displaying available services and their settings to the user. When\na request to a service is sent from the client to the server, a pipeline executes the transformation functions specified to query the service and return\nits result. An additional post processing is applied to the final response to\ncompute some statistics necessary for the application. The post processing is\nplaced on top of the transformation functions provided by the user, so that\nfurther services additions do not need to explicitly tell the system how to\ncompute those statistics."),(0,o.kt)("div",{style:{textAlign:"center"}},(0,o.kt)("img",{src:"/I2T-docs/img/query-service.png"})),(0,o.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"Two different pipeline exists for reconciliators and extenders services. They can be found in ",(0,o.kt)("inlineCode",{parentName:"p"},"./api/services/extension/extension-pipeline.js")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"./api/services/reconciliation/reconciliation-pipeline.js"),"."))),(0,o.kt)("h2",{id:"add-a-new-service"},"Add a new service"),(0,o.kt)("p",null,"Services are situated in the ",(0,o.kt)("inlineCode",{parentName:"p"},"services")," folder at the root of the application. They are grouped by their core functionality. At the moment there are services of types ",(0,o.kt)("inlineCode",{parentName:"p"},"reconciliator")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"extender"),". Each service is constitued by three components:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'title="Service structure"',title:'"Service','structure"':!0},"\ud83d\udce6serviceId\n \u2523 \ud83d\udcdcindex.js\n \u2523 \ud83d\udcdcrequestTransformer.js\n \u2517 \ud83d\udcdcresponseTransformer.js\n")),(0,o.kt)("h3",{id:"indexjs"},"index.js"),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"index.js")," file contains characteristics of the service you want to add."),(0,o.kt)(i.Z,{mdxType:"Tabs"},(0,o.kt)(s.Z,{value:"structure",label:"Reconciliator - File structure",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"// be sure to export the object as default\nexport default {\n  // private properties are kept on the server\n  private: {\n    // specifies the endpoint to the external service in the environment file (.env)\n    endpoint: process.env.ENVIRONMENT_VARIABLE\n  },\n  // public properties are sent to the client\n  public: {\n    // name of the service (shown in the UI)\n    name: '',\n    // a description to give the user informations about this service (shown in the UI). \n    // It supports HTML markup syntax. \n    description: '',\n    // relative URL which will be queried from the client. e.g.: /reconciliators/asia/geonames\n    relativeUrl: '',\n    // (e.g: geo, wd, dbp)\n    prefix: '',\n    // base URI of the resources returned from this service\n    uri: '',\n    // specify how to visualize metadata information\n    metaToView: {}\n  }\n}\n")),(0,o.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},(0,o.kt)("inlineCode",{parentName:"p"},"Type")," corresponds to a UI componenent. Check ",(0,o.kt)("a",{parentName:"p",href:"/I2T-docs/frontend/metadata-components"},"here")," how to add new UI component. If ",(0,o.kt)("inlineCode",{parentName:"p"},"type")," is omitted the field is treated as text. The data fields included\nin the object will be displayed in the UI, meanwhile all others fields are left out of the visualization.")))),(0,o.kt)(s.Z,{value:"exampleRecon",label:"Reconciliator - Example",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"export default {\n  private: {\n    endpoint: process.env.ASIA_RECONCILIATION\n  },\n  public: {\n    name: 'ASIA (geonames)',\n    prefix: 'geo',\n    relativeUrl: '/asia/geonames',\n    description: 'Reconcile entities to Geonames using ASIA.',\n    uri: 'http://www.geonames.org/',\n    metaToView: {\n      id: {\n        label: 'ID',\n      },\n      name: {\n        label: 'Name',\n        type: 'link'\n      },\n      score: {\n        label: 'Score'\n      },\n      type: {\n        label: 'Types',\n        type: 'subList'\n      },\n      match: {\n        label: 'Match',\n        type: 'tag'\n      }\n    }\n  }\n}\n")),(0,o.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},(0,o.kt)("inlineCode",{parentName:"p"},"Type")," corresponds to a UI componenent. Check ",(0,o.kt)("a",{parentName:"p",href:"/I2T-docs/frontend/metadata-components"},"here")," how to add new UI component. If ",(0,o.kt)("inlineCode",{parentName:"p"},"type")," is omitted the field is treated as text. The data fields included\nin the object will be displayed in the UI, meanwhile all others fields are left out of the visualization."))))),(0,o.kt)(i.Z,{mdxType:"Tabs"},(0,o.kt)(s.Z,{value:"structureExtender",label:"Extender - File structure",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"// be sure to export the object as default\nexport default {\n  // private properties are kept on the server\n  private: {\n    // endpoint to the external service specified in the environment file (.env)\n    endpoint: process.env.ENVIRONMENT_VARIABLE\n  },\n  // public properties are sent to the client\n  public: {\n    // name of the service (shown in the UI)\n    name: '',\n    // a description to give the user informations about this service (shown in the UI). \n    // It supports HTML markup syntax. \n    description: '',\n    // relative URL which will be queried from the client. e.g.: /reconciliators/asia/geonames\n    relativeUrl: '',\n    // specify how to render the form to query the extension service\n    // each object of the array identifies a form field. Can be empty.\n    formParams: []\n  }\n}\n"))),(0,o.kt)(s.Z,{value:"exampleExt",label:"Extender - Example",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"export default {\n  private: {\n    endpoint: process.env.ASIA_EXTENSION\n  },\n  public: {\n    name: 'ASIA (geonames)',\n    relativeUrl: '/asia/geonames',\n    description: 'ASIA extension service based on geonames.',\n    formParams: [\n      {\n        // unique id to identify the form field\n        id: 'property',\n        // description of the form field\n        description: 'Select on or more <b>Property</b> values:',\n        // label of the form field\n        label: 'Property',\n        // input type. Available components are 'text', 'checkbox', 'selectColumns'\n        inputType: 'checkbox',\n        // rules applied to this form field (only 'required' is currently available)\n        rules: ['required'],\n        options: [\n          {\n            id: 'adm1',\n            label: 'First-order administrative division (Regions or States)',\n            value: 'parentADM1'\n          },\n          {\n            id: 'adm2',\n            label: 'Second-order administrative division (Provinces)',\n            value: 'parentADM2'\n          },\n          {\n            id: 'adm3',\n            label: 'Third-order administrative division (Communes)',\n            value: 'parentADM3'\n          },\n          {\n            id: 'adm4',\n            label: 'Fourth-order administrative division',\n            value: 'parentADM4'\n          }\n        ]\n      }\n    ]\n  }\n}\n")))),(0,o.kt)("h3",{id:"requesttransformerjs"},"requestTransformer.js"),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"requestTransformer.js")," file contains a transformation function which transform the client request to the format necessary to query the external service. The function returns the response from the external service:"),(0,o.kt)(i.Z,{mdxType:"Tabs"},(0,o.kt)(s.Z,{value:"structure",label:"File structure",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"import config from './index';\n// library to perform http requests\nimport axios from 'axios';\n\nconst { endpoint } = config.private;\n\n// be sure to export the function as default\n// the function receivs as input the request object from the client\nexport default async (req) => {\n  const { items } = req;\n\n  // transformation function applied to the request items to query the service\n  const formBody = ...\n\n  const response = await axios.post(`${endpoint}/endpoint/service`, formBody)\n  return response.data;\n}\n"))),(0,o.kt)(s.Z,{value:"example",label:"Example",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"import config from './index';\nimport axios from 'axios';\n\nconst { endpoint } = config.private;\n\nexport default async (req) => {\n  const { items } = req;\n  const queries = items.reduce((acc, { id, label }) => ({\n    ...acc,\n    [id]: { query: encodeURIComponent(label || '') }\n  }), {})\n\n  const formBody = 'queries=' + JSON.stringify(queries);\n  const response = await axios.post(`${endpoint}/geonames`, formBody)\n  return response.data;\n}\n")))),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Reconciliation")," and ",(0,o.kt)("strong",{parentName:"p"},"extension")," requests have the following formats:"),(0,o.kt)(i.Z,{mdxType:"Tabs"},(0,o.kt)(s.Z,{value:"recReq",label:"Reconciliation request",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "serviceId":"asiaGeonames",\n  "items":[\n    {"id":"r0$StrCity","label":"Kirchheim unter Teck"},\n    {"id":"r1$StrCity","label":"Herrenberg"},\n    {"id":"r2$StrCity","label":"Baden-Baden"},\n    {"id":"r3$StrCity","label":"Aalen"},\n    ...\n  ]\n}\n'))),(0,o.kt)(s.Z,{value:"extReq",label:"Extension request",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "serviceId":"asiaGeonames",\n  "items":{\n    // column\n    "Match Location":{\n      "r0":"geo:6557942",\n      "r1":"geo:6557935",\n      "r2":"geo:6555605",\n      "r3":"geo:6558032",\n      "r4":"geo:6558054"\n    },\n  },\n  // additional properties for the specific extender service\n  "property":["parentADM1"],\n  ...\n}\n')))),(0,o.kt)("h3",{id:"responsetransformerjs"},"responseTransformer.js"),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"responseTransformer.js")," file contains a transformation function which transform the response of the external service to a standard format so that the frontend application always receives the same data to operate on:"),(0,o.kt)(i.Z,{mdxType:"Tabs"},(0,o.kt)(s.Z,{value:"structure",label:"Reconciliator - File structure",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"import config from './index';\n// resource uri from the index configuration\nconst { uri } = config.public;\n\n// be sure to export the function as default\n// the function receives as input the request object from the client \n// (res) and the response from the external service (res)\nexport default async (req, res) => {\n  // transformation function applied to the response (res) of the requestTransformer\n  const response = ...\n  return response;\n}\n"))),(0,o.kt)(s.Z,{value:"recExample",label:"Reconciliator - Example",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"import config from './index';\n\nconst { uri } = config.public;\n\nexport default async (req, res) => {\n  const response = Object.keys(res).map((id) => {\n    const metadata = res[id].result.map((metaItem) => ({\n      ...metaItem,\n      name: {\n        value: metaItem.name,\n        uri: `${uri}${metaItem.id}`\n      }\n    }))\n\n    return {\n      id,\n      metadata\n    }\n  });\n  return response;\n}\n")))),(0,o.kt)(i.Z,{mdxType:"Tabs"},(0,o.kt)(s.Z,{value:"extStructure",label:"Extender - File structure",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"// be sure to export the function as default\n// the function receives as input the request object from the client \n// (res) and the response from the external service (res)\nexport default async (req, res) => {\n  const { items } = req;\n  // input columns ids from the request items\n  const inputColumnsLabels = Object.keys(items);\n\n  let response = {\n    // columns entities to be added\n    columns: {},\n    // rows of the columns to be added \n    // (e.g.: if only a column is added, each row would contain only once cell)\n    rows: {},\n    // a mapping between the new column obtained from extension of the input column (i.e.: { newColumnId: inputColumnId })\n    // meta is used to place the new columns in the correct order in the UI.\n    meta: {}\n  }\n\n  // transformation function to obtain the response\n  ...\n\n  return response;\n}\n"))),(0,o.kt)(s.Z,{value:"extExample",label:"Extender - Example",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"// contains mappings between prefixes and URIs (e.g.: dbp: { uri: 'http://www.geonames.org/' })\nimport { KG_INFO } from \"../../../utils/constants\";\n\nexport default async (req, res) => {\n  const { items } = req;\n  const inputColumnsLabels = Object.keys(items);\n\n  let response = {\n    columns: {},\n    rows: {},\n    meta: {}\n  }\n\n  res.forEach((serviceResponse, colIndex) => {\n    serviceResponse.forEach(({ rowId, data }) => {\n      data.forEach(({ weatherParameters, offset }) => {\n        if (weatherParameters) {\n          weatherParameters.forEach(({ id, ...rest }) => {\n            const colId = `${inputColumnsLabels[colIndex]}_offset${offset}_${id}`;\n            response.columns[colId] = {\n              id: colId,\n              label: colId,\n              metadata: []\n            }\n            response.meta[colId] = inputColumnsLabels[colIndex];\n\n            const cellId = `${rowId}$${colId}`;\n            response.rows[rowId] = {\n              ...response.rows[rowId],\n              id: rowId,\n              cells: {\n                ...(response.rows[rowId] && { ...response.rows[rowId].cells }),\n                [colId]: {\n                  id: cellId,\n                  label: id === 'sund' ? rest.cumulValue : rest.avgValue,\n                  metadata: []\n                }\n              }\n            }\n          });\n        }\n      });\n    });\n  });\n  return response;\n}\n")))),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Reconciliation")," and ",(0,o.kt)("strong",{parentName:"p"},"extension")," responses have the following formats:"),(0,o.kt)(i.Z,{mdxType:"Tabs"},(0,o.kt)(s.Z,{value:"recReq",label:"Reconciliation response",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'[\n  {\n    "id": "r1$StrCity",\n    "metadata":[\n      {\n        "id": "6555605",\n        "name": {\n          "value": "Baden-Baden",\n          "uri": "http://www.geonames.org/6555605"\n        },\n        "type": [\n          { "id": "A.ADM4", "name": "A.ADM4"}\n        ],\n        "score": 138.1361083984375,\n        "match": false\n      },\n      ...\n    ]\n  },\n  {\n    "id": "r2$StrCity",\n    "metadata":[...]\n  },\n  {\n    "id": "r3$StrCity",\n    "metadata":[...]\n  },\n  ...\n]\n'))),(0,o.kt)(s.Z,{value:"extReq",label:"Extension response",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "columns": {\n    "StrCity_parentADM1_offset0_ws": {\n      "id": "StrCity_parentADM1_offset0_ws",\n      "label": "StrCity_parentADM1_offset0_ws",\n      "metadata": []\n    }\n  },\n  "rows": {\n    "r0": {\n      "id": "r0",\n      "cells": {\n        "StrCity_parentADM1_offset0_ws": {\n          "id": "r0$StrCity_parentADM1_offset0_ws",\n          "label": 8.234119802185715,\n          "metadata": []\n        }\n      }\n    },\n    "r2": {\n      "id": "r2",\n      "cells": {\n        "StrCity_parentADM1_offset0_ws": {\n          "id": "r2$StrCity_parentADM1_offset0_ws",\n          "label": 7.960282242257143,\n          "metadata": []\n        }\n      }\n    },\n    ...\n  }\n  "meta": {\n    "StrCity_parentADM1_offset0_ws": "StrCity_parentADM1"\n  }\n}\n')))),(0,o.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"You can prevent a configured service from being loaded into the runtime of the server using the ",(0,o.kt)("inlineCode",{parentName:"p"},"exclude")," field in the initial configuration, as described ",(0,o.kt)("a",{parentName:"p",href:"/I2T-docs/backend/config#configuration"},"here"),"."))))}f.isMDXComponent=!0}}]);