"use strict";(self.webpackChunktest=self.webpackChunktest||[]).push([[927],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return h}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=a.createContext({}),l=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=l(e.components);return a.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,c=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),u=l(n),h=r,f=u["".concat(c,".").concat(h)]||u[h]||p[h]||i;return n?a.createElement(f,o(o({ref:t},d),{},{components:n})):a.createElement(f,o({ref:t},d))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=u;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:r,o[1]=s;for(var l=2;l<i;l++)o[l]=n[l];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},1527:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return c},metadata:function(){return l},toc:function(){return d},default:function(){return u}});var a=n(7462),r=n(3366),i=(n(7294),n(3905)),o=["components"],s={sidebar_position:3},c="Framework Architecture",l={unversionedId:"architecture",id:"architecture",title:"Framework Architecture",description:"The tool is presented as a framework and not as a simple application. SemTUI is developed as a prototype and it is intended to provide extendable",source:"@site/docs/architecture.md",sourceDirName:".",slug:"/architecture",permalink:"/I2T-docs/architecture",editUrl:"https://github.com/facebook/docusaurus/edit/main/website/docs/architecture.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Resources",permalink:"/I2T-docs/resources"},next:{title:"Architecture",permalink:"/I2T-docs/backend/architecture"}},d=[{value:"Frontend",id:"frontend",children:[],level:2},{value:"Backend",id:"backend",children:[],level:2},{value:"Application Workflow",id:"application-workflow",children:[],level:2}],p={toc:d};function u(e){var t=e.components,s=(0,r.Z)(e,o);return(0,i.kt)("wrapper",(0,a.Z)({},p,s,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"framework-architecture"},"Framework Architecture"),(0,i.kt)("p",null,"The tool is presented as a framework and not as a simple application. SemTUI is developed as a prototype and it is intended to provide extendable\ncomponents that can be selectively interchanged, added or modified by a developer. It should provide standard ways, mechanisms and solid structures\nto build additional functionalities or integrate new services."),(0,i.kt)("p",null,"Indeed, one of the non-functional requirements is to design components\nsuch that modularity is a top priority, so that future changes can be easily\nmade without redesigning part of the existing application."),(0,i.kt)("p",null,"The framework combines both the powers of a web server and a client\nside application available as a web application. This structure enables a\nseparation of concerns by separating the application into units, with minimal\noverlapping between the functions of the individual units. The separation\nis achieved using modularization and arrangement in the distinct software\nlayers of the application."),(0,i.kt)("p",null,"In the figure below is shown the general architecture of the whole system. It is\ndivided into two main parts and each of them is then layered with multiple\nsoftware abstractions to handle different kinds of tasks."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Framework Architecture",src:n(1900).Z})),(0,i.kt)("h2",{id:"frontend"},"Frontend"),(0,i.kt)("p",null,"It handles the interaction with the end user and provides\nall the functionalities necessary to the Semantic Enrichment of a table. It is a web application written using ",(0,i.kt)("a",{parentName:"p",href:"https://it.reactjs.org/"},"React")," and its sublayers\nenable to handle the application logic, communicate with the REST\nAPI, exposed by the backend web server, and rendering changes to UI\ncomponents so that the logic is reflected."),(0,i.kt)("h2",{id:"backend"},"Backend"),(0,i.kt)("p",null,"It is mainly responsible of three tasks: it handles the integration and communication with any of the provided external services,\ne.g.: reconciliator services, extender services, it handles the store and\nretrieval of the tables uploaded by the users through the frontend application and finally, it exposes a REST API to ease the communication\nwith the React frontend. It is built using ",(0,i.kt)("a",{parentName:"p",href:"https://nodejs.org/it/"},"NodeJS")," and ",(0,i.kt)("a",{parentName:"p",href:"https://expressjs.com/"},"Express"),"."),(0,i.kt)("h2",{id:"application-workflow"},"Application Workflow"),(0,i.kt)("div",{style:{textAlign:"center"}},(0,i.kt)("img",{src:"/img/workflow.png"})),(0,i.kt)("p",null,"Before introducing each component and its functionalities, a typical workflow of the application is presented and schematized in the figure above:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"The user can start the interaction with the system by either selecting\none of the uploaded tables, or by uploading a new one. Once a table\nis selected the user can perform actions on it. There are two kinds\nof actions: an action which doesn\u2019t require a request to the backend\nserver, e.g.: modify a table cell label, visualize some of the results, and\nan action which requires a request to the REST API, e.g.: save the\ntable, query an annotation service (1)."),(0,i.kt)("li",{parentName:"ol"},"If the action doesn\u2019t require a request to the server, it usually means\nthat it is only going to update the UI data store to reflect changes to\nsome UI component (2.2)."),(0,i.kt)("li",{parentName:"ol"},"Otherwise, an action may require a response from an external service\n(3.1), or update the current table saved to a database (3.2)."),(0,i.kt)("li",{parentName:"ol"},"For example, the user may require to query an external reconciliator service which provides an entity annotation for a set of cell labels\n(instance-level annotation), using the information and ontology from a\ncertain KG"),(0,i.kt)("li",{parentName:"ol"},"For this kind of request a backend pipeline is built to ease the integration of new services. It is composed by an initial transformation of the\nrequest from the web app, so that its data is adapted to the schema\nnecessary to query the external service. Once a response from the service is obtained, a new transformation is applied so that the annotation\ndata is always the same when it reaches back to the UI (3.1)."),(0,i.kt)("li",{parentName:"ol"},"The UI always receives a standardized response, so it can easily update\nthe data store no matter of the used external service. Once the data\nstore is updated, the application rerenders its content to reflect the new\nchanges (4)."),(0,i.kt)("li",{parentName:"ol"},"Other activities that can be performed by the user and require an\ninteraction with the backend API are all the operations on the table files\nor metadata. For example, saving the current table changes requires\nthe backend to find the table stored in the database layer to update its\ndata (3.2).")))}u.isMDXComponent=!0},1900:function(e,t,n){t.Z=n.p+"assets/images/architecture-ebc5a5fa65fab6b20ff25bb43d673293.png"}}]);