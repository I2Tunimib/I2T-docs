"use strict";(self.webpackChunktest=self.webpackChunktest||[]).push([[971],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>m});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},p=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),p=c(n),m=r,g=p["".concat(l,".").concat(m)]||p[m]||u[m]||o;return n?a.createElement(g,i(i({ref:t},d),{},{components:n})):a.createElement(g,i({ref:t},d))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=p;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var c=2;c<o;c++)i[c]=n[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}p.displayName="MDXCreateElement"},8215:(e,t,n)=>{n.d(t,{Z:()=>r});var a=n(7294);const r=function({children:e,hidden:t,className:n}){return a.createElement("div",{role:"tabpanel",hidden:t,className:n},e)}},6396:(e,t,n)=>{n.d(t,{Z:()=>p});var a=n(7462),r=n(7294),o=n(2389),i=n(9443);const s=function(){const e=(0,r.useContext)(i.Z);if(null==e)throw new Error('"useUserPreferencesContext" is used outside of "Layout" component.');return e};var l=n(3810),c=n(6010);const d="tabItem_vU9c";function u(e){const{lazy:t,block:n,defaultValue:a,values:o,groupId:i,className:u}=e,p=r.Children.map(e.children,(e=>{if((0,r.isValidElement)(e)&&void 0!==e.props.value)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),m=o??p.map((({props:{value:e,label:t}})=>({value:e,label:t}))),g=(0,l.lx)(m,((e,t)=>e.value===t.value));if(g.length>0)throw new Error(`Docusaurus error: Duplicate values "${g.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const b=null===a?a:a??p.find((e=>e.props.default))?.props.value??p[0]?.props.value;if(null!==b&&!m.some((e=>e.value===b)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${b}" but none of its children has the corresponding value. Available values are: ${m.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:f,setTabGroupChoices:h}=s(),[v,y]=(0,r.useState)(b),k=[],{blockElementScrollPositionUntilNextRender:T}=(0,l.o5)();if(null!=i){const e=f[i];null!=e&&e!==v&&m.some((t=>t.value===e))&&y(e)}const w=e=>{const t=e.currentTarget,n=k.indexOf(t),a=m[n].value;a!==v&&(T(t),y(a),null!=i&&h(i,a))},x=e=>{let t=null;switch(e.key){case"ArrowRight":{const n=k.indexOf(e.currentTarget)+1;t=k[n]||k[0];break}case"ArrowLeft":{const n=k.indexOf(e.currentTarget)-1;t=k[n]||k[k.length-1];break}}t?.focus()};return r.createElement("div",{className:"tabs-container"},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,c.Z)("tabs",{"tabs--block":n},u)},m.map((({value:e,label:t})=>r.createElement("li",{role:"tab",tabIndex:v===e?0:-1,"aria-selected":v===e,className:(0,c.Z)("tabs__item",d,{"tabs__item--active":v===e}),key:e,ref:e=>k.push(e),onKeyDown:x,onFocus:w,onClick:w},t??e)))),t?(0,r.cloneElement)(p.filter((e=>e.props.value===v))[0],{className:"margin-vert--md"}):r.createElement("div",{className:"margin-vert--md"},p.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==v})))))}function p(e){const t=(0,o.Z)();return r.createElement(u,(0,a.Z)({key:String(t)},e))}},5447:(e,t,n)=>{n.r(t),n.d(t,{frontMatter:()=>s,contentTitle:()=>l,metadata:()=>c,toc:()=>d,default:()=>p});var a=n(7462),r=(n(7294),n(3905)),o=n(6396),i=n(8215);const s={sidebar_position:6},l="Exchanged Data Format",c={unversionedId:"table-representation",id:"table-representation",title:"Exchanged Data Format",description:"In the following section are described the data formats exchanged between client and server for reconciliation and extension requests. The descriptions is presented in Typescript.",source:"@site/docs/table-representation.md",sourceDirName:".",slug:"/table-representation",permalink:"/I2T-docs/table-representation",editUrl:"https://github.com/I2Tunimib/I2T-docs/docs/table-representation.md",tags:[],version:"current",sidebarPosition:6,frontMatter:{sidebar_position:6},sidebar:"tutorialSidebar",previous:{title:"Framework Architecture",permalink:"/I2T-docs/architecture"},next:{title:"Architecture",permalink:"/I2T-docs/backend/architecture"}},d=[{value:"Annotation Metadata",id:"annotation-metadata",children:[],level:2},{value:"Reconciliation",id:"reconciliation",children:[{value:"Request",id:"request",children:[],level:3},{value:"Response",id:"response",children:[],level:3}],level:2},{value:"Extension",id:"extension",children:[{value:"Request",id:"request-1",children:[],level:3},{value:"Response",id:"response-1",children:[],level:3}],level:2}],u={toc:d};function p({components:e,...t}){return(0,r.kt)("wrapper",(0,a.Z)({},u,t,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"exchanged-data-format"},"Exchanged Data Format"),(0,r.kt)("p",null,"In the following section are described the data formats exchanged between client and server for reconciliation and extension requests. The descriptions is presented in Typescript."),(0,r.kt)("h2",{id:"annotation-metadata"},"Annotation Metadata"),(0,r.kt)("p",null,"The annotation data is modeled following the ",(0,r.kt)("strong",{parentName:"p"},"W3C standard format")," for the representation of semantic annotations:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="Annotation metadata"',title:'"Annotation','metadata"':!0},"interface ColumnMetadata = {\n  type?: { id: string; name: string; }[];\n  property?: { \n    id: string; \n    name: string; \n    obj: string; \n    score: number; \n    match: boolean;\n  }[];\n  entity?: EntityMetadata[];\n}\n\ninterface EntityMetadata = {\n  id: string;\n  match: boolean;\n  name: string;\n  score: number;\n  type?: { id: string; name: string }[];\n  description?: string;\n}\n")),(0,r.kt)("h2",{id:"reconciliation"},"Reconciliation"),(0,r.kt)("h3",{id:"request"},"Request"),(0,r.kt)("p",null,"The ",(0,r.kt)("strong",{parentName:"p"},"req")," object of a ",(0,r.kt)("strong",{parentName:"p"},"requestTransformer")," contains the original request from the client and ",(0,r.kt)("em",{parentName:"p"},"optionally")," the processed request (see ",(0,r.kt)("a",{parentName:"p",href:"/I2T-docs/backend/services-aggregator"},"External services aggregator"),"):"),(0,r.kt)(o.Z,{mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"original",label:"Request (original)",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"interface ReconciliationRequestOriginal {\n  // items to reconcile\n  items: Item[];\n}\n\ninterface Item {\n  // cell id\n  id: string;\n  // label to reconcile\n  label: string;\n}\n"))),(0,r.kt)(i.Z,{value:"processed",label:"Request (processed)",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"interface ReconciliationRequestProcessed {\n  // items to reconcile as map where\n  // the key is the label to reconcile\n  // and the array contains the ids of the cells with the same label\n  items: Record<string, string[]>;\n}\n\n")))),(0,r.kt)("h3",{id:"response"},"Response"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"type ReconciliationResponseProcessed = Item[];\n\ninterface Item {\n  // cell id\n  id: string;\n  // candidate entity annotations\n  metadata?: EntityMetadata[];\n}\n")),(0,r.kt)("h2",{id:"extension"},"Extension"),(0,r.kt)("h3",{id:"request-1"},"Request"),(0,r.kt)("p",null,"The ",(0,r.kt)("strong",{parentName:"p"},"req")," object of a ",(0,r.kt)("strong",{parentName:"p"},"requestTransformer")," contains the original request from the client and ",(0,r.kt)("em",{parentName:"p"},"optionally")," the processed request (see ",(0,r.kt)("a",{parentName:"p",href:"/I2T-docs/backend/services-aggregator"},"External services aggregator"),"):"),(0,r.kt)(o.Z,{mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"original",label:"Request (original)",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"interface ExtensionRequestOriginal {\n  // items to extend. columnId: { rowId: metadataId }\n  items: Record<string, Item>;\n  // any properties that may be required by the service\n  [serviceProperty]?: any;\n}\n\ntype Item = {\n  // rowId: metadataId\n  [rowId]: string;\n}\n"))),(0,r.kt)(i.Z,{value:"processed",label:"Request (processed)",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"interface ExtensionRequestProcessed {\n  // items to extend as a map\n  // columnId: { metadataId: [row1, row2, ...] }\n  items: Record<string, Item>;\n}\n\ntype Item = {\n  // metadataId: [row1, row2,...]\n  [metadataId]: string[];\n}\n\n")))),(0,r.kt)("h3",{id:"response-1"},"Response"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"interface ExtensionResponseProcessed = {\n  // columns to add\n  columns: Record<string, Column>;\n  // map between extended column and original column ids\n  meta: Record<string, string>;\n};\n\ninterface Column {\n  label: string;\n  metadata?: ColumnMetadata[];\n  kind?: 'entity' | 'literal';\n  role?: 'sbj' | 'obj';\n  cells: Record<string, Cell>;\n}\n\ninterface Cell = {\n  label: string;\n  metadata?: EntityMetadata[];\n}\n")))}p.isMDXComponent=!0}}]);