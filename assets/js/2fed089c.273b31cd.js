"use strict";(self.webpackChunktest=self.webpackChunktest||[]).push([[632],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>d});var o=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=o.createContext({}),l=function(e){var t=o.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=l(e.components);return o.createElement(c.Provider,{value:t},e.children)},h={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},u=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=l(n),d=r,m=u["".concat(c,".").concat(d)]||u[d]||h[d]||a;return n?o.createElement(m,i(i({ref:t},p),{},{components:n})):o.createElement(m,i({ref:t},p))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,i=new Array(a);i[0]=u;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var l=2;l<a;l++)i[l]=n[l];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}u.displayName="MDXCreateElement"},8281:(e,t,n)=>{n.r(t),n.d(t,{frontMatter:()=>a,contentTitle:()=>i,metadata:()=>s,toc:()=>c,default:()=>p});var o=n(7462),r=(n(7294),n(3905));const a={sidebar_position:4},i="Components tree",s={unversionedId:"frontend/components",id:"frontend/components",title:"Components tree",description:"The majority of the logic of the entire application",source:"@site/docs/frontend/components.md",sourceDirName:"frontend",slug:"/frontend/components",permalink:"/I2T-docs/frontend/components",editUrl:"https://github.com/I2Tunimib/I2T-docs/docs/frontend/components.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Thunk middleware",permalink:"/I2T-docs/frontend/thunk"},next:{title:"Dashboard components",permalink:"/I2T-docs/frontend/dashboard-components"}},c=[],l={toc:c};function p({components:e,...t}){return(0,r.kt)("wrapper",(0,o.Z)({},l,t,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"components-tree"},"Components tree"),(0,r.kt)("p",null,"The majority of the logic of the entire application\nresides in the two layers just presented, the global store and the thunks. The\nfrontend web application has another important layer that aims to present to\nthe users changes to the internal stored data, enabling complex processes to\nbe executed through the simple interaction with visual components displayed\nto the users."),(0,r.kt)("p",null,"React builds user interfaces with the composition of multiple components,\nthey are essentialy the building blocks of any React application. A component is a class or a function that takes input properties, if necessary, and\nreturns a React element that describes how a section of the UI should appear. For example, if we consider a simple button element, a Button component can be\nbuilt as a function which takes as input the label of the button and a click\nhandler, and the result is an HTML button element with attached an event\nhandler for the click event."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="Button component example"',title:'"Button',component:!0,'example"':!0},"const Button = ({ label, onClick }) => {\n  return (\n    <button onClick={onClick}>\n      {label}\n    </button>\n  )\n}\n")),(0,r.kt)("p",null,"Components can then be reused throughout the whole application without the need to rewrite the same code that would render the same unit. The\npower of React comes from the composition of components to seamlessly\nbuild a user interface. Let\u2019s imagine to build a list of the available tables\nuploaded on the server. The list would be a container component which renders, for each table, a list item. Each list item may be composed by other\ncomponents, e.g.: a label displaying the table name, a component showing\nthe last time the table has been modified, a status indicator and a button.\nEach component has been defined once, but it has been used multiple times\nfor the creation of the list. The result takes on a tree structure where each\nnode is a component and the depth defines the hierarchy between all of the\ncomponents that build the list."),(0,r.kt)("div",{style:{textAlign:"center"}},(0,r.kt)("img",{style:{width:"600px"},src:"/I2T-docs/img/component-tree.png"})),(0,r.kt)("p",null,"It\u2019s also important to understand that React only rerenders components\nwhen necessary so that data changes are reflected to the view. A rerender\nfor a component takes place only when an input property, or the component\ninternal state changes, so that performance are kept high during the whole\nlifecycle of the application."),(0,r.kt)("p",null,"Those characteristics make the application fully modular thanks to the\ntree structure. Any nodes of the tree can be substituted anytime with other\ncomponents without impacting on the rest of the application."))}p.isMDXComponent=!0}}]);