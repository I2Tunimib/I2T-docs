"use strict";(self.webpackChunktest=self.webpackChunktest||[]).push([[971],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return m}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),p=c(n),m=a,f=p["".concat(s,".").concat(m)]||p[m]||d[m]||o;return n?r.createElement(f,i(i({ref:t},u),{},{components:n})):r.createElement(f,i({ref:t},u))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=p;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var c=2;c<o;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},8215:function(e,t,n){var r=n(7294);t.Z=function(e){var t=e.children,n=e.hidden,a=e.className;return r.createElement("div",{role:"tabpanel",hidden:n,className:a},t)}},6396:function(e,t,n){n.d(t,{Z:function(){return p}});var r=n(7462),a=n(7294),o=n(2389),i=n(9443);var l=function(){var e=(0,a.useContext)(i.Z);if(null==e)throw new Error('"useUserPreferencesContext" is used outside of "Layout" component.');return e},s=n(3616),c=n(6010),u="tabItem_vU9c";function d(e){var t,n,r,o=e.lazy,i=e.block,d=e.defaultValue,p=e.values,m=e.groupId,f=e.className,g=a.Children.map(e.children,(function(e){if((0,a.isValidElement)(e)&&void 0!==e.props.value)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),b=null!=p?p:g.map((function(e){var t=e.props;return{value:t.value,label:t.label}})),v=(0,s.lx)(b,(function(e,t){return e.value===t.value}));if(v.length>0)throw new Error('Docusaurus error: Duplicate values "'+v.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var h=null===d?d:null!=(t=null!=d?d:null==(n=g.find((function(e){return e.props.default})))?void 0:n.props.value)?t:null==(r=g[0])?void 0:r.props.value;if(null!==h&&!b.some((function(e){return e.value===h})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+h+'" but none of its children has the corresponding value. Available values are: '+b.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var y=l(),k=y.tabGroupChoices,T=y.setTabGroupChoices,w=(0,a.useState)(h),x=w[0],E=w[1],I=[],N=(0,s.o5)().blockElementScrollPositionUntilNextRender;if(null!=m){var O=k[m];null!=O&&O!==x&&b.some((function(e){return e.value===O}))&&E(O)}var R=function(e){var t=e.currentTarget,n=I.indexOf(t),r=b[n].value;r!==x&&(N(t),E(r),null!=m&&T(m,r))},q=function(e){var t,n=null;switch(e.key){case"ArrowRight":var r=I.indexOf(e.currentTarget)+1;n=I[r]||I[0];break;case"ArrowLeft":var a=I.indexOf(e.currentTarget)-1;n=I[a]||I[I.length-1]}null==(t=n)||t.focus()};return a.createElement("div",{className:"tabs-container"},a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,c.Z)("tabs",{"tabs--block":i},f)},b.map((function(e){var t=e.value,n=e.label;return a.createElement("li",{role:"tab",tabIndex:x===t?0:-1,"aria-selected":x===t,className:(0,c.Z)("tabs__item",u,{"tabs__item--active":x===t}),key:t,ref:function(e){return I.push(e)},onKeyDown:q,onFocus:R,onClick:R},null!=n?n:t)}))),o?(0,a.cloneElement)(g.filter((function(e){return e.props.value===x}))[0],{className:"margin-vert--md"}):a.createElement("div",{className:"margin-vert--md"},g.map((function(e,t){return(0,a.cloneElement)(e,{key:t,hidden:e.props.value!==x})}))))}function p(e){var t=(0,o.Z)();return a.createElement(d,(0,r.Z)({key:String(t)},e))}},5447:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return c},contentTitle:function(){return u},metadata:function(){return d},toc:function(){return p},default:function(){return f}});var r=n(7462),a=n(3366),o=(n(7294),n(3905)),i=n(6396),l=n(8215),s=["components"],c={sidebar_position:6},u="Exchanged Data Format",d={unversionedId:"table-representation",id:"table-representation",title:"Exchanged Data Format",description:"In the following section are described the data formats exchanged between client and server for reconciliation and extension requests. The descriptions is presented in Typescript.",source:"@site/docs/table-representation.md",sourceDirName:".",slug:"/table-representation",permalink:"/I2T-docs/table-representation",editUrl:"https://github.com/I2Tunimib/I2T-docs/docs/table-representation.md",tags:[],version:"current",sidebarPosition:6,frontMatter:{sidebar_position:6},sidebar:"tutorialSidebar",previous:{title:"Framework Architecture",permalink:"/I2T-docs/architecture"},next:{title:"Architecture",permalink:"/I2T-docs/backend/architecture"}},p=[{value:"Annotation Metadata",id:"annotation-metadata",children:[],level:2},{value:"Reconciliation",id:"reconciliation",children:[{value:"Request",id:"request",children:[],level:3},{value:"Response",id:"response",children:[],level:3}],level:2},{value:"Extension",id:"extension",children:[{value:"Request",id:"request-1",children:[],level:3},{value:"Response",id:"response-1",children:[],level:3}],level:2}],m={toc:p};function f(e){var t=e.components,n=(0,a.Z)(e,s);return(0,o.kt)("wrapper",(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"exchanged-data-format"},"Exchanged Data Format"),(0,o.kt)("p",null,"In the following section are described the data formats exchanged between client and server for reconciliation and extension requests. The descriptions is presented in Typescript."),(0,o.kt)("h2",{id:"annotation-metadata"},"Annotation Metadata"),(0,o.kt)("p",null,"The annotation data is modeled following the ",(0,o.kt)("strong",{parentName:"p"},"W3C standard format")," for the representation of semantic annotations:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="Annotation metadata"',title:'"Annotation','metadata"':!0},"interface ColumnMetadata = {\n  type?: { id: string; name: string; }[];\n  property?: { \n    id: string; \n    name: string; \n    obj: string; \n    score: number; \n    match: boolean;\n  }[];\n  entity?: EntityMetadata[];\n}\n\ninterface EntityMetadata = {\n  id: string;\n  match: boolean;\n  name: string;\n  score: number;\n  type?: { id: string; name: string }[];\n  description?: string;\n}\n")),(0,o.kt)("h2",{id:"reconciliation"},"Reconciliation"),(0,o.kt)("h3",{id:"request"},"Request"),(0,o.kt)("p",null,"The ",(0,o.kt)("strong",{parentName:"p"},"req")," object of a ",(0,o.kt)("strong",{parentName:"p"},"requestTransformer")," contains the original request from the client and ",(0,o.kt)("em",{parentName:"p"},"optionally")," the processed request (see ",(0,o.kt)("a",{parentName:"p",href:"/I2T-docs/backend/services-aggregator"},"External services aggregator"),"):"),(0,o.kt)(i.Z,{mdxType:"Tabs"},(0,o.kt)(l.Z,{value:"original",label:"Request (original)",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"interface ReconciliationRequestOriginal {\n  // items to reconcile\n  items: Item[];\n}\n\ninterface Item {\n  // cell id\n  id: string;\n  // label to reconcile\n  label: string;\n}\n"))),(0,o.kt)(l.Z,{value:"processed",label:"Request (processed)",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"interface ReconciliationRequestProcessed {\n  // items to reconcile as map where\n  // the key is the label to reconcile\n  // and the array contains the ids of the cells with the same label\n  items: Record<string, string[]>;\n}\n\n")))),(0,o.kt)("h3",{id:"response"},"Response"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"type ReconciliationResponseProcessed = Item[];\n\ninterface Item {\n  // cell id\n  id: string;\n  // candidate entity annotations\n  metadata?: EntityMetadata[];\n}\n")),(0,o.kt)("h2",{id:"extension"},"Extension"),(0,o.kt)("h3",{id:"request-1"},"Request"),(0,o.kt)("p",null,"The ",(0,o.kt)("strong",{parentName:"p"},"req")," object of a ",(0,o.kt)("strong",{parentName:"p"},"requestTransformer")," contains the original request from the client and ",(0,o.kt)("em",{parentName:"p"},"optionally")," the processed request (see ",(0,o.kt)("a",{parentName:"p",href:"/I2T-docs/backend/services-aggregator"},"External services aggregator"),"):"),(0,o.kt)(i.Z,{mdxType:"Tabs"},(0,o.kt)(l.Z,{value:"original",label:"Request (original)",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"interface ExtensionRequestOriginal {\n  // items to extend. columnId: { rowId: metadataId }\n  items: Record<string, Item>;\n  // any properties that may be required by the service\n  [serviceProperty]?: any;\n}\n\ntype Item = {\n  // rowId: metadataId\n  [rowId]: string;\n}\n"))),(0,o.kt)(l.Z,{value:"processed",label:"Request (processed)",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"interface ExtensionRequestProcessed {\n  // items to extend as a map\n  // columnId: { metadataId: [row1, row2, ...] }\n  items: Record<string, Item>;\n}\n\ntype Item = {\n  // metadataId: [row1, row2,...]\n  [metadataId]: string[];\n}\n\n")))),(0,o.kt)("h3",{id:"response-1"},"Response"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"interface ExtensionResponseProcessed = {\n  // columns to add\n  columns: Record<string, Column>;\n  // map between extended column and original column ids\n  meta: Record<string, string>;\n};\n\ninterface Column {\n  label: string;\n  metadata?: ColumnMetadata[];\n  kind?: 'entity' | 'literal';\n  role?: 'sbj' | 'obj';\n  cells: Record<string, Cell>;\n}\n\ninterface Cell = {\n  label: string;\n  metadata?: EntityMetadata[];\n}\n")))}f.isMDXComponent=!0}}]);